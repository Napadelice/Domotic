services:
  traefik:
    image: traefik:latest
    container_name: traefik
    volumes:
      - ./traefik:/etc/traefik
      - ${DOCKER_LOG_DIR}/traefik:/etc/traefik-log
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 8082:8082
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - TZ=Europe/Zurich
      - CLOUDFLARE_EMAIL=${CF_EMAIL}
      - CLOUDFLARE_API_KEY=${CF_API_KEY}
      - PUID=1000
      - PGID=1000
      - UMASK=002        
    restart: always
    networks: 
      - napadelice
      - socket_proxy
    labels:
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN1_TARGET_DOMAIN}`)" # Nom de domaine pour accéder au dashboard
      - "traefik.http.routers.traefik-dashboard.service=api@internal"  # Service Traefik interne pour le dashboard
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure" 
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"

  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=${CF_DDNS_API_KEY}
      - ZONE=${CF_DDNS_ZONE}
      - PROXIED=false
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
    networks:
      - napadelice      

  #Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - TRAEFIK_VERSION=3
      - CF_EMAIL=${CF_EMAIL}
      - CF_TOKEN=${CF_API_KEY}
      - TARGET_DOMAIN=${TARGET_DOMAIN}
      - DOMAIN1=${DOMAIN1}
      - DOMAIN1_ZONE_ID=${DOMAIN1_ZONE_ID}
      - DOMAIN1_PROXIED=FALSE
      - DOMAIN1_TARGET_DOMAIN=${DOMAIN1_TARGET_DOMAIN}
      #- DOMAIN2=${DOMAIN2}
      #- DOMAIN2_ZONE_ID=${DOMAIN2_ZONE_ID}
      #- DOMAIN2_PROXIED=TRUE
      #- DOMAIN2_TARGET_DOMAIN=${DOMAIN2_TARGET_DOMAIN}
    #labels:
      #Add hosts specified in rules here to force cf-companion to create the CNAMEs
      #Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      #- "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`netdata.${TARGET_DOMAIN}`) || HostHeader(`hass.${TARGET_DOMAIN}`)"
    networks:
      - napadelice      
      - socket_proxy

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    #<<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    ports:
      - 2375:2375    
    networks:
      - socket_proxy
    privileged: true
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      #- POST=1 # Watchtower
      #- DELETE=1 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      #- IMAGES=1 # Portainer, Watchtower
      #- INFO=1 # Portainer
      #- NETWORKS=1 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      #- SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      #- TASKS=1 # Portaienr
      #- VOLUMES=1 # Portainer
      # POST Options
      #- CONTAINERS_CREATE=1 # WatchTower
      #- CONTAINERS_START=1 # WatchTower
      #- CONTAINERS_UPDATE=1 # WatchTower
      # DELETE Options
      #- CONTAINERS_DELETE=1 # WatchTower
      #- IMAGES_DELETE=1 # WatchTower  

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    hostname: mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: homeassistant
      MYSQL_USER: homeassistant
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ${DOCKER_DATA_DIR}/mariadb:/var/lib/mysql
      - ./mariadb/50-server.cnf:/etc/mysql/mariadb.conf.d/50-server.cnf
      - ./mariadb/processed-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - napadelice
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  hass:
    image: homeassistant/home-assistant:latest
    hostname: hass
    restart: always
    container_name: hass
    network_mode: "host"
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ./homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    depends_on:
      - mqtt
      - mariadb
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.hass.rule=Host(`hass.${DOMAIN1_TARGET_DOMAIN}`)"
    #   - "traefik.http.routers.hass.entrypoints=websecure"
    #   - "traefik.http.routers.hass.tls.certresolver=cloudflare"
    #   - "traefik.http.services.hass.loadbalancer.servers.url=http://192.168.2.27:8123"

  nodered:
    image: nodered/node-red:latest
    hostname: nodered
    restart: always
    container_name: nodered
    ports:
      - "1880:1880"
    volumes:
      - ${DOCKER_DATA_DIR}/nodered:/data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - mqtt
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodered.rule=Host(`nodered.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.nodered.entrypoints=websecure"
      - "traefik.http.routers.nodered.tls.certresolver=cloudflare"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"

  mqtt:
    image: eclipse-mosquitto
    hostname: mqtt
    restart: always
    container_name: mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ${DOCKER_CONF_DIR}/mqtt:/mosquitto/config
      - ${DOCKER_DATA_DIR}/mqtt:/mosquitto/data
      - ${DOCKER_LOG_DIR}/mqtt:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
    networks:
      - napadelice
    user: "1883:1883"

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest   
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - napadelice
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=websecure"
      - "traefik.http.routers.dozzle.tls.certresolver=cloudflare"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ${DOCKER_DATA_DIR}/prometheus:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090" 

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ${DOCKER_DATA_DIR}/grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000" 

  ntopng:
    image: ntop/ntopng_arm64.dev
    container_name: ntopng
    #ports:
    #  - "3001:3000"  # Port par défaut pour l'interface web ntopng
    #  - "5556:5556"  # Port pour le flux NetFlow/sFlow (optionnel)
    volumes:
      - ${DOCKER_CONF_DIR}/ntopng/ntopng.conf:/etc/ntopng/ntopng.conf  # Configuration personnalisée
      #- ${DOCKER_CONF_DIR}/ntopng/ntopng.license:/etc/ntopng.license  # Licence (si nécessaire)
      - ${DOCKER_DATA_DIR}/ntopng:/var/lib/ntopng  # Volume de données persistant
    environment:
      - TZ=Europe/Zurich  # Définir le fuseau horaire (adapter si nécessaire)
      - NTOPNG_ARGS=--community 
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ntopng.rule=Host(`ntopng.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.ntopng.entrypoints=websecure"
      - "traefik.http.routers.ntopng.tls.certresolver=cloudflare"
      - "traefik.http.services.ntopng.loadbalancer.server.port=3000"


networks:
  napadelice:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24
  socket_proxy:
    name: socket_proxy
    driver: bridge 
