services:
  traefik:
    image: traefik:latest
    container_name: traefik
    volumes:
      - ./traefik:/etc/traefik
      - ${DOCKER_LOG_DIR}/traefik:/etc/traefik-log
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 8082:8082
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - TZ=Europe/Zurich
      - CLOUDFLARE_EMAIL=${CF_EMAIL}
      - CLOUDFLARE_API_KEY=${CF_API_KEY}
      - PUID=1000
      - PGID=1000
      - UMASK=002        
    restart: always
    networks: 
      - napadelice
      - socket_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN1_TARGET_DOMAIN}`)" # Nom de domaine pour accéder au dashboard
      - "traefik.http.routers.traefik-dashboard.service=api@internal"  # Service Traefik interne pour le dashboard
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure" 
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"

  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=${CF_DDNS_API_KEY}
      - ZONE=${CF_DDNS_ZONE}
      - PROXIED=false
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
    networks:
      - napadelice      

  #Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    environment:
      - DOCKER_HOST=tcp://socket-proxy:2375
      - TRAEFIK_VERSION=3
      - CF_EMAIL=${CF_EMAIL}
      - CF_TOKEN=${CF_API_KEY}
      - TARGET_DOMAIN=${TARGET_DOMAIN}
      - DOMAIN1=${DOMAIN1}
      - DOMAIN1_ZONE_ID=${DOMAIN1_ZONE_ID}
      - DOMAIN1_PROXIED=FALSE
      - DOMAIN1_TARGET_DOMAIN=${DOMAIN1_TARGET_DOMAIN}
      #- DOMAIN2=${DOMAIN2}
      #- DOMAIN2_ZONE_ID=${DOMAIN2_ZONE_ID}
      #- DOMAIN2_PROXIED=TRUE
      #- DOMAIN2_TARGET_DOMAIN=${DOMAIN2_TARGET_DOMAIN}
    #labels:
      #Add hosts specified in rules here to force cf-companion to create the CNAMEs
      #Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      #- "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`netdata.${TARGET_DOMAIN}`) || HostHeader(`hass.${TARGET_DOMAIN}`)"
    networks:
      - napadelice      
      - socket_proxy

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    #<<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    ports:
      - 2375:2375    
    networks:
      - socket_proxy
    privileged: true
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      #- POST=1 # Watchtower
      #- DELETE=1 # Watchtower
        # GET Optons
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      #- IMAGES=1 # Portainer, Watchtower
      #- INFO=1 # Portainer
      #- NETWORKS=1 # Portainer, Watchtower
      - NODES=0
      - PLUGINS=0
      #- SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      #- TASKS=1 # Portaienr
      #- VOLUMES=1 # Portainer
      # POST Options
      #- CONTAINERS_CREATE=1 # WatchTower
      #- CONTAINERS_START=1 # WatchTower
      #- CONTAINERS_UPDATE=1 # WatchTower
      # DELETE Options
      #- CONTAINERS_DELETE=1 # WatchTower
      #- IMAGES_DELETE=1 # WatchTower  

  mariadb:
    image: mariadb:latest
    container_name: mariadb
    hostname: mariadb
    restart: unless-stopped
    stop_grace_period: 5s
    security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
      - seccomp:unconfined
      - apparmor:unconfined
    command: --innodb-buffer-pool-size=512M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    environment:
      MARIADB_AUTO_UPGRADE: "1"
      MARIADB_INITDB_SKIP_TZINFO: "1"
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      #MYSQL_DATABASE: homeassistant
      #MYSQL_USER: homeassistant
      #MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ${DOCKER_DATA_DIR}/mariadb:/var/lib/mysql
      - ./mariadb/50-server.cnf:/etc/mysql/mariadb.conf.d/50-server.cnf
      - ./mariadb/processed-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - napadelice
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  hass:
    image: homeassistant/home-assistant:latest
    hostname: hass
    restart: always
    container_name: hass
    network_mode: "host"
    environment:
      - MYSQL_PASSWORD=${MYSQL_HOMEASSISTANT_PASSWORD}
    volumes:
      - ./homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    depends_on:
      - mqtt
      - mariadb
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.hass.rule=Host(`hass.${DOMAIN1_TARGET_DOMAIN}`)"
    #   - "traefik.http.routers.hass.entrypoints=websecure"
    #   - "traefik.http.routers.hass.tls.certresolver=cloudflare"
    #   - "traefik.http.services.hass.loadbalancer.servers.url=http://192.168.2.27:8123"

  nodered:
    image: nodered/node-red:latest
    hostname: nodered
    restart: always
    container_name: nodered
    ports:
      - "1880:1880"
    volumes:
      - ${DOCKER_DATA_DIR}/nodered:/data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - mqtt
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodered.rule=Host(`nodered.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.nodered.entrypoints=websecure"
      - "traefik.http.routers.nodered.tls.certresolver=cloudflare"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"

  noderedtest:
    image: nodered/node-red:latest
    hostname: noderedtest
    restart: always
    container_name: noderedtest
    ports:
      - "1882:1880"
    volumes:
      - ${DOCKER_DATA_DIR}/noderedtest:/data
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - mqtt
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.noderedtest.rule=Host(`noderedtest.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.noderedtest.entrypoints=websecure"
      - "traefik.http.routers.noderedtest.tls.certresolver=cloudflare"
      - "traefik.http.services.noderedtest.loadbalancer.server.port=1880"

  mqtt:
    image: eclipse-mosquitto
    hostname: mqtt
    restart: always
    container_name: mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ${DOCKER_CONF_DIR}/mqtt:/mosquitto/config
      - ${DOCKER_DATA_DIR}/mqtt:/mosquitto/data
      - ${DOCKER_LOG_DIR}/mqtt:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
    networks:
      - napadelice
    user: "1883:1883"
    labels:
      - "traefik.enable=true"

      - "traefik.tcp.routers.mqtt.entrypoints=mqtt"
      - "traefik.tcp.routers.mqtt.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mqtt.service=mqtt"
      - "traefik.tcp.services.mqtt.loadbalancer.server.port=1883"

#      - "traefik.tcp.routers.mqttsecure.entrypoints=mqttsecure"
#      - "traefik.tcp.routers.mqttsecure.tls=true"
#      - "traefik.tcp.routers.mqttsecure.tls.certresolver=cloudflare"
#      - "traefik.tcp.routers.mqttsecure.rule=HostSNI(`mqtts.alexetnico.com`)"
#      - "traefik.tcp.routers.mqttsecure.service=mqtt"

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest   
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - napadelice
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=websecure"
      - "traefik.http.routers.dozzle.tls.certresolver=cloudflare"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ${DOCKER_DATA_DIR}/prometheus:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=cloudflare"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090" 

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ${DOCKER_DATA_DIR}/grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000" 

  ntopng:
    image: ntop/ntopng_arm64.dev
    container_name: ntopng
    #ports:
    #  - "3001:3000"  # Port par défaut pour l'interface web ntopng
    #  - "5556:5556"  # Port pour le flux NetFlow/sFlow (optionnel)
    volumes:
      - ${DOCKER_CONF_DIR}/ntopng/ntopng.conf:/etc/ntopng/ntopng.conf  # Configuration personnalisée
      #- ${DOCKER_CONF_DIR}/ntopng/ntopng.license:/etc/ntopng.license  # Licence (si nécessaire)
      - ${DOCKER_DATA_DIR}/ntopng:/var/lib/ntopng  # Volume de données persistant
    environment:
      - TZ=Europe/Zurich  # Définir le fuseau horaire (adapter si nécessaire)
      - NTOPNG_ARGS=--community 
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ntopng.rule=Host(`ntopng.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.ntopng.entrypoints=websecure"
      - "traefik.http.routers.ntopng.tls.certresolver=cloudflare"
      - "traefik.http.services.ntopng.loadbalancer.server.port=3000"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    #ports:
    #  - "3000:8080"  # Expose le port 8080 interne sur le port 3000 de l'hôte
    environment:
      - OLLAMA_BASE_URL=http://192.168.2.141:11434
    volumes:
      - open-webui:/app/backend/data
    restart: unless-stopped
    networks:
      - napadelice
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`openwebui.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.openwebui.entrypoints=websecure"
      - "traefik.http.routers.openwebui.tls.certresolver=cloudflare"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"

  esphome:
    container_name: esphome
    image: esphome/esphome
    volumes:
      - /srv/docker/Domotic/esphome/config:/config
    network_mode: host
    restart: unless-stopped
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.esphome.rule=Host(`esphome.${DOMAIN1_TARGET_DOMAIN}`)"
#      - "traefik.http.routers.esphome.entrypoints=websecure"
#      - "traefik.http.routers.esphome.tls.certresolver=cloudflare"
#      - "traefik.http.services.esphome.loadbalancer.server.port=6052"    

  photoprism:
    container_name: photoprism 
    ## Use photoprism/photoprism:preview for testing preview builds:
    image: photoprism/photoprism:latest
    ## Don't enable automatic restarts until PhotoPrism has been properly configured and tested!
    ## If the service gets stuck in a restart loop, this points to a memory, filesystem, network, or database issue:
    ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
    # restart: unless-stopped
    stop_grace_period: 10s
    networks:
      - napadelice
    depends_on:
      - mariadb
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    ## Server port mapping in the format "Host:Container". To use a different port, change the host port on
    ## the left-hand side and keep the container port, e.g. "80:2342" (for HTTP) or "443:2342 (for HTTPS):
    ports:
      - "2342:2342"
    ## Before you start the service, please check the following config options (and change them as needed):
    ## https://docs.photoprism.app/getting-started/config-options/
    environment:
      PHOTOPRISM_ADMIN_USER: "admin"                 # admin login username
      PHOTOPRISM_ADMIN_PASSWORD: "${PHOTOPRISM_ADMIN_PASSWORD}"          # initial admin password (8-72 characters)
      PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
      PHOTOPRISM_SITE_URL: "https://photoprism.alexetnico.com/"  # server URL in the format "http(s)://domain.name(:port)/(path)"
      PHOTOPRISM_DISABLE_TLS: "true"                # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
      PHOTOPRISM_DEFAULT_TLS: "false"                 # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
      PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
      PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
      PHOTOPRISM_LOG_LEVEL: "info"                   # log level: trace, debug, info, warning, error, fatal, or panic
      PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
      PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
      PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
      PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
      PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables settings UI and API
      PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
      PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
      PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
      PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
      PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW images
      PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
      PHOTOPRISM_SIDECAR_YAML: "true"                # creates YAML sidecar files to back up picture metadata
      PHOTOPRISM_BACKUP_ALBUMS: "true"               # creates YAML files to back up album metadata
      PHOTOPRISM_BACKUP_DATABASE: "true"             # creates regular backups based on the configured schedule
      PHOTOPRISM_BACKUP_SCHEDULE: "daily"            # backup SCHEDULE in cron format (e.g. "0 12 * * *" for daily at noon) or at a random time (daily, weekly)
      PHOTOPRISM_INDEX_SCHEDULE: ""                  # indexing SCHEDULE in cron format (e.g. "@every 3h" for every 3 hours; "" to disable)
      PHOTOPRISM_AUTO_INDEX: 300                     # delay before automatically indexing files in SECONDS when uploading via WebDAV (-1 to disable)
      PHOTOPRISM_AUTO_IMPORT: -1                     # delay before automatically importing files in SECONDS when uploading via WebDAV (-1 to disable)
      PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
      PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive (no effect without TensorFlow)
      # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that does not require a separate database server
      PHOTOPRISM_DATABASE_DRIVER: "mysql"            # MariaDB 10.5.12+ (MySQL successor) offers significantly better performance compared to SQLite
      PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"     # MariaDB database server (hostname:port)
      PHOTOPRISM_DATABASE_NAME: "photoprism"         # MariaDB database schema name
      PHOTOPRISM_DATABASE_USER: "photoprism"         # MariaDB database user name
      PHOTOPRISM_DATABASE_PASSWORD: "${MYSQL_PHOTOPRISM_PASSWORD}"       # MariaDB database user password
      PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
      PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
      PHOTOPRISM_SITE_AUTHOR: ""                     # meta site author
      ## Video Transcoding (https://docs.photoprism.app/getting-started/advanced/transcoding/):
      # PHOTOPRISM_FFMPEG_ENCODER: "software"        # H.264/AVC encoder (software, intel, nvidia, apple, raspberry, or vaapi)
      # PHOTOPRISM_FFMPEG_SIZE: "1920"               # video size limit in pixels (720-7680) (default: 3840)
      # PHOTOPRISM_FFMPEG_BITRATE: "32"              # video bitrate limit in Mbit/s (default: 50)
      ## Run/install on first startup (options: update https gpu ffmpeg tensorflow davfs clitools clean):
      # PHOTOPRISM_INIT: "https gpu tensorflow"
      ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
      # PHOTOPRISM_UID: 1000
      # PHOTOPRISM_GID: 1000
      # PHOTOPRISM_UMASK: 0000
    ## Start as non-root user before initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
    # user: "1000:1000"
    ## Share hardware devices with FFmpeg and TensorFlow (optional):
    # devices:
    #  - "/dev/dri:/dev/dri"                         # Intel QSV
    #  - "/dev/nvidia0:/dev/nvidia0"                 # Nvidia CUDA
    #  - "/dev/nvidiactl:/dev/nvidiactl"
    #  - "/dev/nvidia-modeset:/dev/nvidia-modeset"
    #  - "/dev/nvidia-nvswitchctl:/dev/nvidia-nvswitchctl"
    #  - "/dev/nvidia-uvm:/dev/nvidia-uvm"
    #  - "/dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools"
    #  - "/dev/video11:/dev/video11"                 # Video4Linux Video Encode Device (h264_v4l2m2m)
    working_dir: "/photoprism" # do not change or remove
    ## Storage Folders: "~" is a shortcut for your home directory, "." for the current directory
    volumes:
      # "/host/folder:/photoprism/folder"                # Example
      - "/srv/docker-data/data/photoprism/photos/photo:/photoprism/originals"               # Original media files (DO NOT REMOVE)
      # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
      # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
      - "/srv/docker-data/data/photoprism/storage:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.photoprism.rule=Host(`photoprism.${DOMAIN1_TARGET_DOMAIN}`)"
      - "traefik.http.routers.photoprism.entrypoints=websecure"
      - "traefik.http.routers.photoprism.tls.certresolver=cloudflare"
      - "traefik.http.services.photoprism.loadbalancer.server.port=2342" 

volumes:
  open-webui:
networks:
  napadelice:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24
  socket_proxy:
    name: socket_proxy
    driver: bridge 
